#!/usr/bin/python

import toposort

#import os
#import sys
#sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from lib_deps import *

candidates = """disk-betree/ImplFlush.i.dfy
disk-betree/ImplGrow.i.dfy
disk-betree/ImplSplit.i.dfy
disk-betree/ImplLeaf.i.dfy
disk-betree/ImplEvict.i.dfy
disk-betree/ImplFlushPolicy.i.dfy
disk-betree/ImplInsert.i.dfy
disk-betree/ImplIO.i.dfy
disk-betree/ImplCache.i.dfy
disk-betree/ImplDealloc.i.dfy
disk-betree/ImplSync.i.dfy
disk-betree/ImplQuery.i.dfy
disk-betree/ImplModelQuery.i.dfy
disk-betree/MainImpl.i.dfy
disk-betree/Betree_Refines_Map.i.dfy
disk-betree/PivotBetree_Refines_Map.i.dfy
disk-betree/ByteBetreeBlockCacheSystem.i.dfy
disk-betree/ByteBetreeBlockCacheSystem_Refines_BetreeBlockCacheSystem.i.dfy
disk-betree/ThreeStateVersionedPivotBetree.i.dfy
disk-betree/PivotBetreeSpecRefinement.i.dfy
disk-betree/PivotBetree_Refines_Betree.i.dfy
disk-betree/BlockCacheSystem_Refines_ThreeStateVersionedBlockInterface.i.dfy
disk-betree/BetreeBlockCacheSystem.i.dfy
disk-betree/BetreeBlockCacheSystem_Refines_ThreeStateVersionedPivotBetree.i.dfy
disk-betree/Impl.i.dfy
disk-betree/ImplModelFlush.i.dfy
disk-betree/ImplModelGrow.i.dfy
disk-betree/ImplModelSplit.i.dfy
disk-betree/ImplModelLeaf.i.dfy
disk-betree/ByteBetreeBlockCache.i.dfy
disk-betree/ImplModelIO.i.dfy
disk-betree/ImplModelCache.i.dfy
disk-betree/ImplModelDealloc.i.dfy
disk-betree/ImplModelSync.i.dfy
disk-betree/ImplModelEvict.i.dfy
disk-betree/ImplModelFlushPolicy.i.dfy
disk-betree/ImplModelInsert.i.dfy
disk-betree/ImplNodes.i.dfy
disk-betree/IndirectionTableImpl.i.dfy
disk-betree/ImplState.i.dfy
disk-betree/KVListPartialFlush.i.dfy
disk-betree/MutableBucket.i.dfy
disk-betree/Marshalling.i.dfy
disk-betree/BetreeInv.i.dfy
disk-betree/PivotBetree.i.dfy
disk-betree/BetreeBlockCache.i.dfy
disk-betree/BlockAllocator.i.dfy
disk-betree/AsyncSectorDiskModel.i.dfy
disk-betree/BlockCache.i.dfy
disk-betree/Transactable.i.dfy
disk-betree/BlockInterface.i.dfy
disk-betree/Graph.i.dfy
disk-betree/BetreeSpec.i.dfy
disk-betree/Betree.i.dfy
disk-betree/Bounds.i.dfy
disk-betree/PivotBetreeSpec.i.dfy
disk-betree/BlockCacheSystem.i.dfy
disk-betree/IndirectionTableModel.i.dfy
disk-betree/ImplModel.i.dfy
disk-betree/PivotsLib.i.dfy
disk-betree/Message.i.dfy
disk-betree/BucketsLib.i.dfy
disk-betree/BucketWeights.i.dfy
disk-betree/KVList.i.dfy
disk-betree/ImplMarshallingModel.i.dfy
disk-betree/ImplMarshalling.i.dfy
disk-betree/Mkfs.i.dfy""".split("\n")

graph = {}
for line in candidates:
    target = IncludeReference(None, 0, line)
    graph[target.normPath] = set([path.normPath for path in includePaths(target)])
candidateSet = set(candidates)
for group in toposort.toposort(graph):
    group = group.intersection(candidateSet)
    print " ".join(group)
