#!/usr/bin/env python3

import re
import json
import sys
from lib_deps import *
import matplotlib
import matplotlib.pyplot as plt

def relevantSources():
    dafnyRoot = "Impl/Bundle.i.dfy"
    return depsFromDfySources([dafnyRoot])

def grepOne(iref, regex):
    rec = re.compile(regex)
    lines = open(iref.normPath).readlines()
    output = set()
    for i in range(len(lines)):
        if rec.search(lines[i]):
            output.add(IncludeReference(iref, i+1, iref.absPath))
    return output

def grepAll(regex):
    instances = set()
    for filename in relevantSources():
        instances = instances.union(grepOne(filename, regex))
    return instances

def lineForIref(iref):
    return open(iref.normPath).readlines()[iref.line_num-1].strip()

def symbolNameForOpaqueIref(iref):
    line = lineForIref(iref)
    mo = re.compile("{:opaque}( |{[^}]*})*(\w+)[\(<]").search(line)
    if mo==None:
        print("XXX no match at ", line)
        return None
    return mo.groups()[1]

def opaqueInstances():
    opaqueRefs = grepAll("{:opaque}")
    records = []
    #print("%s refs" % len(opaqueRefs))
    for iref in opaqueRefs:
        symbolName = symbolNameForOpaqueIref(iref)
        #print(symbolName)
        reveal_count = len(grepAll("reveal_%s" % symbolName))
        record = {"file": iref.normPath, "line": iref.line_num, "symbol":symbolName, "reveal_count":reveal_count}
        records.append(record)
        #print("revealed %2d times: %s in %s at %s" % (reveal_count, symbolName, iref.normPath, iref.line_num))
        #sys.stdout.flush()
    return records

INTERMEDIATE = "auto.data"

def scrape():
    records = opaqueInstances()
    open(INTERMEDIATE, "w").write(json.dumps(records))

def plot(records):
    fig = plt.figure()
    ax = fig.add_subplot(211)
    reveals = [record["reveal_count"] for record in records]
    reveals.sort()
    ax.hist(reveals, bins=max(reveals))

    ax = fig.add_subplot(212)
    xs = reveals
    ys = [i/(len(reveals)-1.0) for i in range(len(reveals))]
    ax.plot(xs, ys)
    fig.savefig("automation-figure.pdf")

def gather_constants(records):
    reveals = [record["reveal_count"] for record in records]
    reveals.sort()

    # print the top offenders
    records.sort(key=lambda r: r["reveal_count"])
    for record in records[-5:]:
        print(record)

    xs = reveals
    ys = [i/(len(reveals)-1.0) for i in range(len(reveals))]
    thresh5 = 5.0
    i5 = next((i for i,x in enumerate(xs) if x>thresh5))
    five_frac = ys[i5]

    return {
        "autoOpaqueCount": len(reveals),
        "autoRevealCount": sum(reveals),
        "autoRevealMean": "%.1f" % (sum(reveals)/len(reveals)),
        "autoRevealMax": max(reveals),
        "autoOpaqueZeroReveals": len([r for r in reveals if r==0]),
        "autoOpaqueFewReveals": len([r for r in reveals if r>0 and r<=3]),
        "autoFivePct": "%d\\%%" % (five_frac*100),
    }

def totalDefinitions(defs):
    defRef = grepAll("(function|predicate|method)")
    ghost = set()
    impl = set()
    for iref in defRef:
        line = lineForIref(iref)
        if "method" in line:
            impl.add(line)
        else:
            ghost.add(line)
    allDefCount = len(ghost) + len(impl)
    defs.update({
        "autoAllDefnCount": allDefCount,
        "autoGhostDefnCount": len(ghost),
        "autoImplDefnCount": len(impl),
        "autoOpaquePct": "%d\\%%" % (100.0*defs["autoOpaqueCount"] / allDefCount),
    })
    return defs

def emit_constants(defs):
    with open("automation-constants.tex", "w") as fp:
        fp.write("% generated by tools/automation-study.py\n")
        for k,v in defs.items():
            fp.write("\\newcommand{\\%s}{%s}\n" % (k, v))

def main():
    #scrape()

    records = json.loads(open(INTERMEDIATE).read())
    print("Got %s records" % len(records))
#    plot(records)
    defs = gather_constants(records)
    defs = totalDefinitions(defs)
    emit_constants(defs)

main()
