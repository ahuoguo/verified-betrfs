TOOLS=$(dir $(abspath $(filter %/Makefile.template,$(MAKEFILE_LIST))))
ROOT=$(abspath $(TOOLS)/..)/
DAFNY_CMD="$(ROOT)/.dafny/bin/dafny"

BUILD_DIR=$(ROOT)build
export ROOT

TARGET_DIR_PATH=$(shell realpath --relative-to $(ROOT) .)

define transform-targets
	$(patsubst %.dfy,$(BUILD_DIR)/$(TARGET_DIR_PATH)/%.verified,$1)
endef

#
# Shouldn't have to modify anything below here.
#

TARGET_VERIFIEDS=$(call transform-targets,$(TARGET_SRCS))
TARGET_DEPS=$(patsubst %.verified,%.deps,$(TARGET_VERIFIEDS))

#$(warning TARGET_SRCS $(TARGET_SRCS))
#$(warning TARGET_VERIFIEDS $(TARGET_VERIFIEDS))
#$(warning TARGET_DEPS $(TARGET_DEPS))

all: $(TARGET_VERIFIEDS)

clean:
	rm -rf $(BUILD_DIR)

###############################################
#####  Build tree  ############################
###############################################
# http://ismail.badawi.io/blog/2017/03/28/automatic-directory-creation-in-make/
.PRECIOUS: $(BUILD_DIR)/. $(BUILD_DIR)%/.
.SECONDEXPANSION:

$(BUILD_DIR)/.:
	mkdir -p $@

$(BUILD_DIR)%/.:
	mkdir -p $@

.PRECIOUS: $(BUILD_DIR)/%/dir.deps
$(warning BUILD_DIR $(BUILD_DIR))
$(BUILD_DIR)/%/dir.deps: $(ROOT)% | $$(@D)/.
	$(ROOT)tools/deps-for-dfy.py $<

#include $(TARGET_DEPS)
DIR_DEPS=$(BUILD_DIR)/$(TARGET_DIR_PATH)/dir.deps
$(warning DIR_DEPS $(DIR_DEPS))
include $(DIR_DEPS)

# jonh thinks we don't want this wildcard include: it's unsound in a surprising way.
# The single include above is clumsy because it requires deps-for-dafny to emit
# transitive closure of deps, but at least we know what it does and when it does it.
#rwildcard=$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))
#include $(call rwildcard,$(BUILD_DIR)/,*.deps)

# This was cool until someone tried to run it on MacOS.
#TIME=time -f "real %es cpu %Us"
TIME=time

$(BUILD_DIR)/%.s.syntax: $(ROOT)%.s.dfy | $$(@D)/.
	$(TIME) $(DAFNY_CMD) /compile:0 /dafnyVerify:0 $<
	touch $@

$(BUILD_DIR)/%.i.syntax: $(ROOT)%.i.dfy | $$(@D)/.
	$(TIME) $(DAFNY_CMD) /compile:0 /dafnyVerify:0 $<
	touch $@

$(BUILD_DIR)/%.verified: $(ROOT)%.dfy | $$(@D)/.
	$(TIME) $(DAFNY_CMD) /compile:0 $<
	touch $@

# In principle, building code should depend on .verified! But we want
# to play with perf with not-entirely-verifying trees.
$(BUILD_DIR)/%.i.cs: $(ROOT)%.i.dfy | $$(@D)/.
	$(eval TMPNAME=$(patsubst %.i.cs,%-i.cs,$@))	 #eval trick to assign make var inside rule
	# Dafny irritatingly removes the '.i' presuffix.
	$(TIME) $(DAFNY_CMD) /compile:0 /noVerify /spillTargetCode:3 /countVerificationErrors:0 /out:$(TMPNAME) $<
	mv $(TMPNAME) $@

$(BUILD_DIR)/%.cpp: $(ROOT)%.dfy | $$(@D)/.
	$(eval TMPNAME=$(patsubst %.cpp,%-i.cpp,$@))	 #eval trick to assign make var inside rule
	# Dafny irritatingly removes the '.i' presuffix.
	$(TIME) $(DAFNY_CMD) /compile:0 /noVerify /spillTargetCode:3 /countVerificationErrors:0 /out:$(TMPNAME) /compileTarget:cpp $<
	mv $(TMPNAME) $@
