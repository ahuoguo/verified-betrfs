&other.sptr._M_refcount._M_pi->_M_use_count

ena 8
b Application.h:19
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
watch *$34

allocations

Application::Insert Framework.cpp:450 init->1
Application::Insert Framework.cpp:381 +1->2
handle_Insert BundleWrapper.cpp:40 +1->3
handleInsert Bundle.cpp:10941 +1->4
handleInsert Bundle.cpp:10941 -1->3 Why didn't InsertImpl_Compile take one!? it wasn't ready.
handle_Insert BundleWrapper.cpp:40 -1->2
Application::Insert Framework.cpp:381 -1->1
Application::Insert Framework.cpp:381 +1->2 // back around the loop
handle_Insert BundleWrapper.cpp:40 +1->3
handleInsert Bundle.cpp:10941 +1->4
handleInsert Bundle.cpp:10941 -1->3
handle_Insert BundleWrapper.cpp:40 -1->2
Application::Insert Framework.cpp:381 -1->1
Application::Insert Framework.cpp:381 +1->2 // back around the loop
handle_Insert BundleWrapper.cpp:40 +1->3
handleInsert Bundle.cpp:10941 +1->4
::insert Bundle.cpp:10013 +1->6
::WeightMessageUint64 Bundle.cpp:890 +1->7
::WeightMessageUint64 Bundle.cpp:890 +1->8
::WeightMessageUint64 Bundle.cpp:891 -1->7
::WeightMessageUint64 Bundle.cpp:892 +1->8
::WeightMessageUint64 Bundle.cpp:892 -1->7
::WeightMessageUint64 Bundle.cpp:890 -1->6
::insert Bundle.cpp:10013 -1->5
::insert Bundle.cpp:10013 -1->4
::insert Bundle.cpp:10015 +1->5
::insert Bundle.cpp:10015 +1->6
InsertKeyValue Bundle.cpp:9967 +1->7 (bound into a Message)
InsertKeyValue Bundle.cpp:9967 +1->8 (assigned into a new Message)
InsertKeyValue Bundle.cpp:9967 -1->7 (dropped a Message)
InsertKeyValue Bundle.cpp:9967 -1->6 ...weird, we're talking about a value? Guess so.
InsertKeyValue Bundle.cpp:9968 +1->7
MutCache:::InsertKeyValue Bundle.cpp:6309 +1->8
Node::InsertKeyValue Bundle.cpp:6176 +1->9
MutBucket::Insert Bundle.cpp:4654 +1->10
KMBtree::Insert Bundle.cpp:4062 +1->11
KMBtree::InsertNode Bundle.cpp:4007 +1->12
KMBtree::InsertLeaf Bundle.cpp:2091 +1->13
Arrays::Insert Bundle.cpp:3526 +1->14
Arrays::Insert Bundle.cpp:3526 +1->15
Arrays::Insert Bundle.cpp:3526 -1->14
KMBtree::InsertLeaf Bundle.cpp:3923 -1->13  // weird, not 2091?
KMBtree::InsertNode Bundle.cpp:4007 -1->12
KMBtree::Insert Bundle.cpp:4062 -1->11
MutBucket::Insert Bundle.cpp:4654 -1->10
MutBucket::Insert Bundle.cpp:4662 +1->11  // WeightMessage
WeightMessageUint64 Bundle.cpp:890 +1->12
WeightMessageUint64 Bundle.cpp:891 +1->13
WeightMessageUint64 Bundle.cpp:891 -1->12
WeightMessageUint64 Bundle.cpp:892 +1->13
WeightMessageUint64 Bundle.cpp:892 -1->12
WeightMessageUint64 Bundle.cpp:890 -1->11
MutBucket::Insert Bundle.cpp:4662 -1->10
Node::InsertKeyValue Bundle.cpp:6176 -1->9
MutCache:::InsertKeyValue Bundle.cpp:6309 -1->8
InsertKeyValue Bundle.cpp:9968 -1->7
InsertKeyValue Bundle.cpp:9966 -1->6
::insert Bundle.cpp:10015 -1->5
handleInsert Bundle.cpp:10941 -1->4
handle_Insert BundleWrapper.cpp:40 -1->3
Application::Insert Framework.cpp:381 -1->2
Application::Insert Framework.cpp:450 -1->1

... we really finished the initial insert ...


WHOAH! By the time we get to db.evictEverything, the refcount on that
ByteString is 3!!
EvictEverything gets stuck with 4 pages left in the cache. Why?
...and I note that I still have 3 refs left to my ByteString.

FindDeallocable returns None.
  - nothing is in the IndirectionTableImpl garbageQueue.

b Application.h:19
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
watch *$1
disa 1
disa 2
b YcsbMain.cpp:147
b YcsbMain.cpp:148

Things that can hold Messages:
  - Node.buffer (map)
  - Bucket.b (map)
  - MessageInsertion.msg (?)
  - Kvl.messages (seq)
  - VMessageArray (parsing?)

b Bundle.cpp:9972
run
set _621_msg->track = true
disa 1
cont
p leakfinder_report()

b Bundle.i.h:2081
set COMPILER_result->track = true

Aargh. My leak_finder doesn't produce the same count as shared_ptr.
Not sure what else to do. Wrap the shared_ptr? But the type is all over
the place!!

Let's deviate for a while and try to reason top-down.

Okay, so I counted up all the fields in all the objects. The only thing
left after EvictEverything are the 1024-element bitmap arrays.
So then who could be hanging onto the value references!?
Proposal: minimize the experiment until I can pass in a value and see it leak
with the smallest amount of experiment.

gdb --args ./build/VeribetrfsYcsb ycsb/workload-leakcheck.spec /tmp/data/
b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
watch *$1
disa 1
disa 2
b YcsbMain.cpp:74
b YcsbMain.cpp:284
cont
p *$1
disa 3
cont
p *$1

10000 +
1 - too small for zipf
10 +
2 +

Even in recordcount=2, watchpoint hit 90 times.

# ranges from /proc/pid/maps
# value from p $24._M_refcount._M_pi, which should appear in any shared_ptr
# to the same referent.
find/g 555555c05000 555555c74000 0x555555c62840
Okay, now that's working! Found 5 occurences in stack, none in heap or text.

b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
### this becomes find target value
p this.seq->sptr._M_refcount._M_pi
disa 1
b YcsbMain.cpp:284
cont
info proc
!cat /proc/30755/maps
# text is third line (rw-p), heap is fourth line [heap]
# subtract one from end address (so it's inclusive) to avoid spurious error.

wow, the ONLY live reference is on the stack.
of course, because we haven't cont'd yet.
Okay, and I found two on the heap.
And I have _M_use_count=1, _M_weak_count=1.
And of course these references are on the HEAP, so I don't have any simple
symbols to find them.
Will the exact same heap addresses get written again? I could watch them...
watch *((long long*) 0x555555c50668)
watch *((long long*) 0x555555c56018)
display/x *((long long*) 0x555555c50668)
display/x *((long long*) 0x555555c56018)
...there are 5 writes to each address.
looking for 0x555555c62840

Jackpot!
2: /x *((long long*) 0x555555c56018) = 0x555555c62840
Stack: Someone building a Message from InsertLeaf from MutBucket Insert
from MutCache InsertKeyValue.
Okay, so 0x555555c56018 is in a KMBtree in a MutBucket in a Node in the Cache,
under ref==0 (obviously).
...and then it's freed.
Okay and then 0x555555c50668 is getting created during marshalling for a sync.
...wait somehow that was the wrong value.
...and then it's the RIGHT value when we're copying an array as part of a
KMBtree to kvl operation as part of marshalling.
  --okay, I think this is the one. Zoom in.
Then 6018 gets zeroed.


b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
### this becomes find target value
p this.seq->sptr._M_refcount._M_pi
disa 1
watch *((long long*) 0x555555c50668)
display/x *((long long*) 0x555555c50668)
b YcsbMain.cpp:284
cont

f5 copying a Message
f10 copying an array of Message
f11 ToSeqSubtree into caller-supplied key, value arrays
f12 allocates that array and returns it up the stack. (MutableBtreeBulkOperations::ToSeq returns a pair) - removed
f13 tree_to_kvl deconstructs the pair and tucks them into a KVList.Kvl.
f14 GetKvl returns it up
f15 MarshallingImpl bucketToVal tucks the message seq into a marshalling V
and returns it.
  -- Hmm 8474 looks suspicious messageSeqToVal
  -- it calls create_VMessageArray, which I think is where the type is getting
  lost.
  -- hmm, no, v.v_VMessageArray.ma has Message type.
f16 concatenates it onto a list and returns that.
f17 nodeToVal returns a generically-typed GenericMarshalling V
  -- I think this is ground zero. 
  -- v seems to know it contains Messages, and yet ... 
f18 sectorToVal returns a generically-typed GenericMarshalling V
f19 MarshallCheckedSector is going to return array<uint8>, so the buck
  better stop here
f20 IOImpl FindLocationAndRequestWrite takes that marshalled output and passes
  it down into io.write()
  ...um no because it's already bytes?

Yeah, so MarshallCheckedSector looks guilty as sin. When its v goes out of
scope, so too should the reference we just took. Let's watch.

...
b Bundle.cpp:8658
cont
p _496_v.v_VCase.val._M_ptr[0].v_VTuple.t.sptr._M_ptr[2].v_VArray.a.sptr._M_ptr[0].v_VTuple.t.sptr._M_ptr[1].v_VMessageArray.ma.sptr._M_ptr[0].v_Define.value.sptr
p &_496_v.v_VCase.val._M_ptr[0].v_VTuple.t.sptr._M_ptr[2].v_VArray.a.sptr._M_ptr[0].v_VTuple.t.sptr._M_ptr[1].v_VMessageArray.ma.sptr._M_ptr[0].v_Define.value.sptr._M_refcount._M_pi->_M_use_count
...and there's our dear friend, well-typed and refcounted.
Also, the count is 2, which is discouraging... oh, no, the other reference
is the cache, which will get dropped, leaving (we think) this one behind.

b MarshallCheckedSector+1140 (third ~V)
...but still 2 refs to Message deep in V.

b *MarshallCheckedSector(StateImpl_Compile::Sector)+1140

b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
### this becomes find target value
p this.seq->sptr._M_refcount._M_pi
disa 1
#watch *((long long*) 0x555555c50668)
#display/x *((long long*) 0x555555c50668)
b YcsbMain.cpp:284
#b *MarshallCheckedSector(StateImpl_Compile::Sector)+1140 #symbols aren't working
b *0x00005555555d078a
cont
p &_496_v.v_VCase.val._M_ptr[0].v_VTuple.t.sptr._M_ptr[2].v_VArray.a.sptr._M_ptr[0].v_VTuple.t.sptr._M_ptr[1].v_VMessageArray.ma.sptr._M_ptr[0].v_Define.value.sptr._M_refcount._M_pi->_M_use_count

b *0x00005555555ec11a # in ~V
  ...walked down the V graph until I got to this.tag==VMessageArray,
and the next stop was KeyArray, not v_Define! suggesting the MessageArray
destruction went awry.

b *0x5555555ec06a # ~VMessageArray
~DafnySequence
~shared_ptr<Message>!
deleter Message[]
_Sp_ebo_helper<Message []>?
operator delete
I see calls to ~Message!
Message_Define
...which decrement the access count from 2 to 1.

So it sure *#@$ looks like we're freeing the reference from v-land.

And in fact we could check that by comparing the references across
MarshallCheckedSector, right?

New strategy. Count the number of references before sync,
before EvictEverything, and after EvictEverything.

b Application.h:19
run
p this.seq->sptr._M_refcount._M_pi
display $1
disa 1
b YcsbMain.cpp:86
b YcsbMain.cpp:283
b YcsbMain.cpp:284

1 reference before sync, 1 before EvictEverything, 1 after. WTF. Is it
the reference from the cache!?
There was indeed exactly one block in the cache. Did it mention this value?

Okay, fine! Let's re-enable the watch just before the sync, to see how the
sync got ahold of that 1 reference!

b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
watch *$1
disa 1 2
b YcsbMain.cpp:86
b YcsbMain.cpp:283
b YcsbMain.cpp:284
cont
# stops at 86
ena 2
cont
f 25
p &s._M_ptr.frozenIndirectionTable._M_ptr
watch *$2
disa 2
cont
# you're in writeResponse now
f 4
p &s->persistentIndirectionTable->t->Count
watch *$3
b Bundle.cpp:11247
cont
...and yet the persistent indirection table seems to remain in play.

p &s._M_ptr.frozenIndirectionTable._M_ptr.t._M_ptr.Count
watch *$6

... a reference gets taken via the single block in the Frozen table.
syncFoundInFrozen

Wow, the count of entries in the frozenIndirection table remains 1,
although the dumps claim that frozenIndirectionTable has 0 things in it.
Let's break in 
... hey wait, when we go to count, frozenIndirectionTable is null.

okay, it gets moved over to the persistentIndirectionTable. I can get
behind that.

b Application.h:19
run
p &this.seq->sptr._M_refcount._M_pi->_M_use_count
watch *$1
disa 1 2
b YcsbMain.cpp:86
b YcsbMain.cpp:283
b YcsbMain.cpp:284
b Bundle.cpp:11262
cont
# stops at 86
ena 2
cont
f 24
disa 2
p &s->cache._M_ptr.cache._M_ptr.Underlying._M_ptr.Storage.sptr._M_ptr[0].tag
watch *$2
break Bundle.cpp:9544
cont
# (detour at :283)
cont
# So, before the remove, the one node in the cache has use count 1.
p &s->cache->cache->Underlying->Storage.sptr._M_ptr[0].v_Entry.value._M_refcount._M_pi._M_use_count
watch *$3
cont
disa 9
display *$3
disa 7
b *0x00005555556266a1
cont
si
# ...and when we leave Fixed*Remove, there are still two refs to the Node!
# WTF?
# I would have expected one to vanish when we called out to replace the Entry
# with a Tombstone.

# p &s->cache->cache->Underlying->Storage.sptr._M_refcount._M_pi._M_use_count
# watch *$3
# cont


# p s->cache->cache->Underlying->Storage.sptr._M_ptr[0]
# p &s->cache->cache->Underlying->Storage.sptr._M_ptr[0]
# watch *$x
# ...next thing that happens is the tombstone, and yet...
# f 5
# ...the use count is 2. I took the wrong watch.
# 
# f 1
# p &removed->v_Some.value._M_refcount._M_pi[0]
# watch *$X
# 
# So why are there 2 refs to the removed node right now?
# yeah, there are definitely still two.
# 
# #TryToWriteBlock
# p s->cache._M_ptr.cache._M_ptr.Underlying._M_ptr.Storage.sptr._M_ptr[0]
# p &s->cache._M_ptr.cache._M_ptr.Underlying._M_ptr.Storage.sptr._M_ptr[0].v_Entry.value._M_ptr
# watch *$2
# It's never f'ing touched.
# Well, the entry becomes a Tombstone; when does that hapen?
# Okay, the tombstone happens in Evict/MutCache::Remove


If I'm not hallucinating, the compiler is generating some unfortunate code.
This line at MutableMapImpl.cpp:197:
    Storage[slotIdx] := Tombstone(key);
Seems to compile to this:
    auto _arr2 = (this->Storage);
    _arr2.at((_278_slotIdx)) = _242_MutableMapModel_Compile::Item <V> ::create_Tombstone(key);
...which at runtime seems to be *copying* this->Storage!
this->Storage has type:
DafnyArray<_242_MutableMapModel_Compile::Item<std::shared_ptr<_628_NodeImpl_Compile::Node> > >
...nevermind, I'm a goof.

At line 5271 (FixedSizeHashMap::Remove), the count is 2: one in removed,
one in the slot.
Huh, the break at 5273 didn't fire. Bummer.
Tearing down _287___v4 in ResizingHashMap::Remove, we get to count 1,
and yet we wander out of that function with one reference intact!

Well, I found at least part of the memory leak.

The compiler generates this for cache `Item`s:
    Item& operator=(const Item other) {
      tag = other.tag;
if (tag == Item::TAG_Empty) { v_Empty = other.v_Empty; }
if (tag == Item::TAG_Entry) { v_Entry = other.v_Entry; }
if (tag == Item::TAG_Tombstone) { v_Tombstone = other.v_Tombstone; }
return *this;
    }
Now if this.tag==Entry and other.tag==Tombstone,
then when we're done, we'll have a Tombstone with
v_Tombstone==other.v_Tombstone (which has just a key in it),
but ALSO v_Entry still has a reference to the entire node in it.
Basically all the nodes we ever evict -- and all the data they reference --
loiter around until the tombstones get cleaned.
I'm not convinced this explains the overall leak to 4GB, although it may
since the total number of available tombstones also keeps growing.

Resolution:
The datatype constructors should zero out all of their fields. Maybe
just copy all of the v_* fields over. Or zero all of the ones that have
references in them. (Although it looks like the datatypes only see a template
argument for their field types, so they may not know what fields have
references in them.)


heaptrack ./build/VeribetrfsYcsb ycsb/workload-leakcheck.spec /tmp/data/
