Unknowns:

The allocation strategy is a pretty thin scaffolding.
- Could go down a layer and have Journal keep in-memory index invariant info
  that avoids the need to page the entire journal in to confirm/update/truncate
  allocation info.
- Hard to tell about allocation strategy for Betree until we write it.

I want to understand Betree:
  - trunk nodes
    - direct links to Branches,
    - but can duplicate destination: need multiset alloc abstraction

  - indirection
    - want 'em

  - the B+trees
  - lookups!
  - alloction / free strategy

Eventually need to add realistic cache. Presently we pass entire DVs.
Presently imagining this shown as a refinement layer

Lookups, Jay Normal Form, Receipts are all examples of "Eager Skolemization"

------------------------------------------------------------------------------

Journal interpretation strategy.

* Define a function IRunning that interprets a diskview based on Variables.
* Define a function IVars that defines Variables based on a superblock + diskview.
* Before recovery, I = IRunning(IVars(disk), disk)
* During recovery, I = IRunning(IVars(disk), disk) ... but IVars is somehow converging on Vars.
* After recovery, I = IRunning(vars, disk)

Betree interpretation strategy.

* Define a function IRunning that interprets a diskview based on Variables.
  -- indTbl, memBuffer
* Define a function IVars that defines Variables based on a superblock + diskview.
  -- indTbl read from disk, empty memBuffer
* Before recovery, I = IRunning(IVars(disk), disk)
* During recovery, I = IRunning(IVars(disk), disk) ... but IVars is somehow converging on Vars.
* After recovery, I = IRunning(vars, disk)

------------------------------------------------------------------------------

How do page-level likes and au-level likes interact with partial allocation?

At the page-granularity likes level (Likes*.dfy):
  - there's a page-tight likes for the whole disk image (one superblock).
  - another page-tight likes for the in-flight disk image
  - the variables has a page-tight likes for what's reachable from
    the current superblock PLUS mini- allocations held at
      - b+tree
      - journal
      - or anywhere else.
  Those mini allocations provide disjoint protection against other
  (concurrent) allocation happening elsewhere in the Variables.
  None of them matter at crash time, since when we snapshot an in-flight
  we're ignoring anything in an allocation, just using the reachable
  stuff.
  In fact, we'll also ignore half-built B+trees.

At the AU level
  - projecting a page-tight likes gives an AU-tight likes, so that tells
    us about the persistent, in-flight images
  - projecting the Variables will create overlaps:
    * no overlaps between different data types, because of how they allocate
    * overlap between journal and journal-alloc
    * overlap between half-built-betree and betree-alloc
    ...but I guess we shouldn't care.
    Big allocator preserves "different-data-types" constraint, which then
      ensures that the refinement to page-level disjointness is correct.
      (wait, do we refine likes or 1-bit repr projections?)
    Mini allocators preserve "intra-data-type" constraint on pages within
    the variables-reserved AUs.

All congruence arguments are per-page, since we NEED to be able to change
the allocated-but-unused pages in an AU in the ephemeral state while promising
to leave in-flight/persistent pages in same AU unchanged.


------------------------------------------------------------------------------

Paged:    Betree, functional, infinite child map, precise buffer stack
Pivot:    Betree, functional, finite child map,   precise buffer stack
Filtered: Betree, functional, finite child map,   filtered buffer stack
XX Linked0:  Betree, pointers,   finite child map,   functional filtered buffer stack
Linked1:  Betree, pointers,   finite child map,   pointers to buffers, entire buffer "in single page"
Linked2:  Betree+B+forest, pointers,   finite child map,   pointers to multi-page B+tree branches in forest
Likes:
